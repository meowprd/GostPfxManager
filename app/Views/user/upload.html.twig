{% extends "components/template.html.twig" %}

{% import "macros/Badge.html.twig" as Badge %}
{% import "macros/Table.html.twig" as Table %}
{% import 'macros/Button.html.twig' as Button %}

{% block content %}

    <div class="bg-default-background h-screen flex mobile:flex-col justify-around">

        {% include "components/dashboard_sidebar.html.twig" %}

        <div id="content" class="flex h-full w-full flex-col justify-between">
            <div class="flex w-full grow shrink-0 basis-0 flex-col items-start gap-8 bg-default-background px-12 py-12 overflow-auto mobile:flex-col mobile:flex-nowrap mobile:gap-6 mobile:px-4 mobile:py-6">
                <div class="w-full flex items-center justify-center">
                    <div class="flex w-full max-w-[1280px] flex-col gap-8 mobile:flex-col mobile:flex-nowrap mobile:gap-6 justify-between">
                        <div class="flex w-full items-start justify-between mobile:flex-col mobile:flex-nowrap mobile:justify-between">
                            <div class="flex flex-col items-start gap-1">
                                <span class="text-heading-1 font-heading-1 text-default-font mobile:text-heading-2 mobile:font-heading-2">
                                    Загрузка сертификата
                                </span>
                            </div>
                        </div>
                        <div id="drop-area" class="flex flex-row gap-2 w-full justify-center h-[300px] items-center rounded-md border border-solid border-neutral-border">
                            <p class="text-body font-body text-subtext-color flex gap-4 items-center">Перетащите файл сюда</p>
                            <p class="text-body font-body text-subtext-color flex gap-4 items-center">или</p>
                            <input class="text-body font-body text-subtext-color" type="file" id="file-input" name="pfx_file" />
                        </div>
                        <div id="file-list" class="text-body font-body text-subtext-color"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('file-input');
        const fileList = document.getElementById('file-list');

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropArea.classList.remove('border-neutral-border');
            dropArea.classList.add('border-error-600');
        }

        function unhighlight() {
            dropArea.classList.remove('border-error-600');
            dropArea.classList.add('border-neutral-border');
        }

        dropArea.addEventListener('drop', handleDrop, false);
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        fileInput.addEventListener('change', function() {
            handleFiles(this.files);
        });

        function handleFiles(files) {
            for (let i = 0; i < files.length; i++) {
                const formData = new FormData();
                formData.append('pfx_file', files[i]);

                const fileInfo = document.createElement('div');
                fileInfo.innerHTML = `
    ${files[i].name} (${formatSize(files[i].size)})
    <span id="text-${i}" class="text-xs text-center w-full"></span>
`;
                fileList.appendChild(fileInfo);

                fetch('/api/cert.upload', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + getCookie('access_token')
                    },
                    credentials: 'include',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        const statusText = document.getElementById('text-'+i);
                        if(data.success) {
                            statusText.classList.add('text-success-800')
                            statusText.textContent = data.message
                        } else {
                            statusText.classList.add('text-error-500')
                            statusText.textContent = data.message + " (" + data.error_code + ")"
                        }
                    })
                    .catch(error => {
                        const statusText = document.getElementById('text-'+i);
                        statusText.classList.add('text-error-500')
                        statusText.textContent = "Ошибка запроса. See console"
                        console.error('Error: ', error)
                    })
            }

        }

        function formatSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
    </script>

{% endblock %}